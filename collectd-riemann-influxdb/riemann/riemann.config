; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log" :console true})

(tcp-server {:host "0.0.0.0"
             :tls? false
             :key "test/data/tls/server.pkcs8"
             :cert "test/data/tls/server.crt"
             :ca-cert "test/data/tls/demoCA/cacert.pem"})

(instrumentation {:interval 1})

(udp-server)
(ws-server {:host "0.0.0.0"})
(repl-server)

(periodically-expire 1)

(let [index (default :ttl 3 (index))]
  (streams
    (expired #(prn "Expired" %))
    (where
      (not
        (or
          (service #"^riemann ")
          (tagged "collectd")))
      index)))

; configuration to deal with collectd streams
(defn pow [b e] (Math/pow b e))
(def gb (pow 1024 3))

(def collectd-thresholds
  {"load/load/shortterm" {:warning 1.0 :critical 2.0}
   "load/load/midterm" {:warning 1.0 :critical 2.0}
   "load/load/longterm" {:warning 1.0 :critical 2.0}
   "cpu-0/cpu-user" {:warning 30 :critical 60}
   "cpu-1/cpu-user" {:warning 30 :critical 60}
   "cpu-0/cpu-system" {:warning 30 :critical 60}
   "cpu-1/cpu-system" {:warning 30 :critical 60}
   "memory/memory-free" {:warning gb :critical (* 0.5 gb) :invert true}
   "df-root/df_complex-free" {:warning gb :critical (* 0.5 gb) :invert true} })

(require '[org.spootnik.riemann.thresholds :refer [threshold-check]])

; collectd stream processing
; Set event state using collectd-thresholds above.
(let [index (default :ttl 20 (index))]
  (streams
    (tagged "collectd"
      (smap (threshold-check collectd-thresholds)
        index))))
